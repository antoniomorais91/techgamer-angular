{"version":3,"file":"ng-gallery-lightbox.mjs","sources":["../../../projects/ng-gallery/lightbox/src/lightbox.model.ts","../../../projects/ng-gallery/lightbox/src/lightbox.animation.ts","../../../projects/ng-gallery/lightbox/src/lightbox.component.ts","../../../projects/ng-gallery/lightbox/src/lightbox.default.ts","../../../projects/ng-gallery/lightbox/src/lightbox.service.ts","../../../projects/ng-gallery/lightbox/src/gallerize.directive.ts","../../../projects/ng-gallery/lightbox/src/lightbox.directive.ts","../../../projects/ng-gallery/lightbox/src/lightbox.module.ts","../../../projects/ng-gallery/lightbox/src/ng-gallery-lightbox.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const LIGHTBOX_CONFIG = new InjectionToken<LightboxConfig>('LIGHTBOX_CONFIG');\n\nexport interface LightboxConfig {\n  backdropClass?: string;\n  panelClass?: string;\n  hasBackdrop?: boolean;\n  keyboardShortcuts?: boolean;\n  closeIcon?: string;\n  role?: string;\n  ariaLabelledBy?: string;\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  startAnimationTime?: number;\n  exitAnimationTime?: number;\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\n\nexport const lightboxAnimation = trigger('lightbox', [\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('{{startAnimationTime}}ms cubic-bezier(0, 0, 0.2, 1)',\n    style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n    animate('{{exitAnimationTime}}ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n]);\n\n","import { Component, Optional, Inject, ElementRef, ChangeDetectionStrategy } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { AnimationEvent } from '@angular/animations';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ConfigurableFocusTrap, ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';\nimport { lightboxAnimation } from './lightbox.animation';\n\n@Component({\n  selector: 'lightbox',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [lightboxAnimation],\n  styleUrls: ['./lightbox.component.scss'],\n  template: `\n    <i class=\"g-btn-close\" aria-label=\"Close\" [innerHTML]=\"closeIcon\" (click)=\"overlayRef.detach()\"></i>\n    <gallery [id]=\"id\" [destroyRef]=\"false\" [skipInitConfig]=\"true\"></gallery>\n  `,\n  host: {\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '\"lightbox-\" + id',\n    '[attr.role]': 'role',\n    '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',\n    '[attr.aria-label]': 'ariaLabel',\n    '[attr.aria-describedby]': 'ariaDescribedBy || null',\n    '[@lightbox]': '{ value: state, params: { startAnimationTime: startAnimationTime, exitAnimationTime: exitAnimationTime } }',\n    '(@lightbox.done)': 'onAnimationDone($event)',\n  }\n})\nexport class LightboxComponent {\n\n  /** Gallery ref id */\n  id: string;\n\n  /** Overlay ref to close the lightbox */\n  overlayRef: OverlayRef;\n\n  /** Close button svg data */\n  closeIcon: SafeHtml;\n\n  /** State of the lightbox animation. */\n  state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** The ARIA role of the lightbox element. */\n  role: string;\n\n  /** Aria label to assign to the lightbox element */\n  ariaLabel: string;\n\n  /** ID of the element that should be considered as the lightbox's label. */\n  ariaLabelledBy: string;\n\n  /** ID of the element that describes the lightbox. */\n  ariaDescribedBy: string;\n\n  /** The lightbox start animation time in ms */\n  startAnimationTime: number;\n\n  /** The lightbox exit animation time in ms */\n  exitAnimationTime: number;\n\n  /** The class that traps and manages focus within the lightbox. */\n  private _focusTrap: ConfigurableFocusTrap;\n\n  /** Element that was focused before the lightbox was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement;\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              private _focusTrapFactory: ConfigurableFocusTrapFactory,\n              private _elementRef: ElementRef) {\n    this._savePreviouslyFocusedElement();\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else {\n      this.overlayRef.dispose();\n      this._restoreFocus();\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    // If were to attempt to focus immediately, then the content of the lightbox would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Saves a reference to the element that was focused before the lightbox was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the lightbox immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the lightbox opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n}\n","import { LightboxConfig } from './lightbox.model';\n\nexport const defaultConfig: LightboxConfig = {\n  backdropClass: 'g-backdrop',\n  panelClass: 'g-overlay',\n  hasBackdrop: true,\n  keyboardShortcuts: true,\n  role: 'lightbox',\n  startAnimationTime: 150,\n  exitAnimationTime: 75,\n  closeIcon: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"512px\" height=\"512px\" enable-background=\"new 0 0 47.971 47.971\" version=\"1.1\" viewBox=\"0 0 47.971 47.971\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88   c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242   C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879   s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\" fill=\"#fff\"/>\n</svg>\n`\n};\n","import { ComponentRef, Inject, Injectable, Optional } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Overlay, OverlayRef, OverlayConfig } from '@angular/cdk/overlay';\nimport { LEFT_ARROW, RIGHT_ARROW, ESCAPE } from '@angular/cdk/keycodes';\nimport { Gallery } from 'ng-gallery';\nimport { Subject } from 'rxjs';\n\nimport { LightboxConfig, LIGHTBOX_CONFIG } from './lightbox.model';\nimport { defaultConfig } from './lightbox.default';\nimport { LightboxComponent } from './lightbox.component';\n\n@Injectable()\nexport class Lightbox {\n\n  /** Gallery overlay ref */\n  private _overlayRef: OverlayRef;\n\n  /** Global config */\n  private _config: LightboxConfig;\n\n  /** Stream that emits when lightbox is opened */\n  opened = new Subject<string>();\n\n  /** Stream that emits when lightbox is closed */\n  closed = new Subject<string>();\n\n  constructor(@Optional() @Inject(LIGHTBOX_CONFIG) config: LightboxConfig, private _gallery: Gallery, private _overlay: Overlay, private _sanitizer: DomSanitizer) {\n    this._config = config ? { ...defaultConfig, ...config } : defaultConfig;\n  }\n\n  /**\n   * Set Lightbox Config\n   * @param config - LightboxConfig\n   */\n  setConfig(config: LightboxConfig) {\n    this._config = { ...this._config, ...config };\n  }\n\n  /**\n   * Open Lightbox Overlay\n   * @param i - Current Index\n   * @param id - Gallery ID\n   * @param config - Lightbox Config\n   */\n  open(i = 0, id = 'lightbox', config?: LightboxConfig) {\n\n    const _config = config ? { ...this._config, ...config } : this._config;\n\n    const overlayConfig: OverlayConfig = {\n      backdropClass: _config.backdropClass,\n      panelClass: _config.panelClass,\n      hasBackdrop: _config.hasBackdrop,\n      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      disposeOnNavigation: true\n    };\n\n    const galleryRef = this._gallery.ref(id);\n    galleryRef.set(i);\n\n    this._overlayRef = this._overlay.create(overlayConfig);\n\n    // overlay opened event\n    this._overlayRef.attachments().subscribe(() => this.opened.next(id));\n\n    // overlay closed event\n    this._overlayRef.detachments().subscribe(() => this.closed.next(id));\n\n    // Attach gallery to the overlay\n    const galleryPortal = new ComponentPortal(LightboxComponent);\n    const lightboxRef: ComponentRef<LightboxComponent> = this._overlayRef.attach(galleryPortal);\n\n    lightboxRef.instance.id = id;\n    lightboxRef.instance.overlayRef = this._overlayRef;\n    lightboxRef.instance.closeIcon = this._sanitizer.bypassSecurityTrustHtml(this._config.closeIcon);\n    lightboxRef.instance.role = this._config.role;\n    lightboxRef.instance.ariaLabel = this._config.ariaLabel;\n    lightboxRef.instance.ariaLabelledBy = this._config.ariaLabelledBy;\n    lightboxRef.instance.ariaDescribedBy = this._config.ariaDescribedBy;\n    lightboxRef.instance.startAnimationTime = this._config.startAnimationTime;\n    lightboxRef.instance.exitAnimationTime = this._config.exitAnimationTime;\n\n    if (_config.hasBackdrop) {\n      this._overlayRef.backdropClick().subscribe(() => this.close());\n    }\n\n    // Add keyboard shortcuts\n    if (_config.keyboardShortcuts) {\n      this._overlayRef.keydownEvents().subscribe((event: any) => {\n        switch (event.keyCode) {\n          case LEFT_ARROW:\n            galleryRef.prev();\n            break;\n          case RIGHT_ARROW:\n            galleryRef.next();\n            break;\n          case ESCAPE:\n            this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close Lightbox Overlay\n   */\n  close() {\n    if (this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  OnDestroy,\n  Inject,\n  Optional,\n  Self,\n  Host,\n  NgZone,\n  ElementRef,\n  PLATFORM_ID\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { Gallery, GalleryRef, ImageItem, GalleryComponent, GalleryState, GalleryItem } from 'ng-gallery';\nimport { Subject, Subscription, from, EMPTY } from 'rxjs';\nimport { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';\n\nimport { Lightbox } from './lightbox.service';\n\n/**\n * This directive has 2 modes:\n * 1 - If host element is a HTMLElement, it detects the images and hooks their clicks to lightbox\n * 2 - If host element is a GalleryComponent, it hooks the images click to the lightbox\n */\n\nconst enum GallerizeMode {\n  Detector = 'detector',\n  Gallery = 'gallery'\n}\n\n@Directive({\n  selector: '[gallerize]'\n})\nexport class GallerizeDirective implements OnInit, OnDestroy {\n\n  /** Default gallery id */\n  private _galleryId = 'lightbox';\n\n  /** Gallerize mode */\n  private readonly _mode: GallerizeMode;\n\n  /** If host element is a HTMLElement, will use the following variables: */\n\n  /** Stream that emits to fire the detection stream the image elements has changed */\n  private _observer$: any;\n\n  /** Stream that emits when image is discover */\n  private _detector$: Subject<void>;\n\n  /** If host element is a GalleryComponent, will use the following variables: */\n\n  /** Gallery events (if used on a gallery component) */\n  private _itemClick$: Subscription;\n  private _itemChange$: Subscription;\n\n  // ======================================================\n\n  /** If set, it will become the gallery id */\n  @Input() gallerize: string;\n\n  /** The selector used to query images elements */\n  @Input() selector = 'img';\n\n  constructor(private _zone: NgZone,\n              private _el: ElementRef,\n              private _gallery: Gallery,\n              private _lightbox: Lightbox,\n              @Inject(PLATFORM_ID) platform: Object,\n              @Inject(DOCUMENT) private _document: any,\n              @Host() @Self() @Optional() private _galleryCmp: GalleryComponent) {\n\n    // Set gallerize mode\n    if (isPlatformBrowser(platform)) {\n      this._mode = _galleryCmp ? GallerizeMode.Gallery : GallerizeMode.Detector;\n    }\n  }\n\n  ngOnInit() {\n    this._zone.runOutsideAngular(() => {\n      this._galleryId = this.gallerize || this._galleryId;\n      const ref = this._gallery.ref(this._galleryId);\n\n      switch (this._mode) {\n        case GallerizeMode.Detector:\n          this.detectorMode(ref);\n          break;\n        case GallerizeMode.Gallery:\n          this.galleryMode(ref);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    switch (this._mode) {\n      case GallerizeMode.Detector:\n        this._detector$.complete();\n        this._observer$.disconnect();\n        break;\n      case GallerizeMode.Gallery:\n        this._itemClick$.unsubscribe();\n        this._itemChange$.unsubscribe();\n    }\n  }\n\n  /** Gallery mode: means `gallerize` directive is used on `<gallery>` component\n   * Adds a click event to each gallery item so it opens in lightbox */\n  private galleryMode(galleryRef: GalleryRef) {\n    // Clone its items to the new gallery instance\n    this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i: number) => this._lightbox.open(i, this._galleryId));\n    this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state: GalleryState) => galleryRef.load(state.items));\n  }\n\n  /** Detector mode: means `gallerize` directive is used on a normal HTMLElement\n   *  Detects images and adds a click event to each image, so it opens in the lightbox */\n  private detectorMode(galleryRef: GalleryRef) {\n    this._detector$ = new Subject();\n    // Query image elements\n    this._detector$.pipe(\n      debounceTime(300),\n      switchMap(() => {\n\n        /** get all img elements from content */\n        const imageElements = this._el.nativeElement.querySelectorAll(this.selector);\n\n        if (imageElements && imageElements.length) {\n\n          const images: GalleryItem[] = [];\n\n          return from(imageElements).pipe(\n            map((el: HTMLElement, i: number) => {\n              // Add click event to the image\n              el.style.cursor = 'pointer';\n              el.addEventListener('click', () => {\n                this._zone.run(() => this._lightbox.open(i, this._galleryId));\n              });\n\n              if (el instanceof HTMLImageElement) {\n                // If element is type of img use the src property\n                return {\n                  src: el.getAttribute('imageSrc') || el.src,\n                  thumb: el.getAttribute('thumbSrc') || el.src\n                };\n              } else {\n                // Otherwise, use element background-image url\n                const elStyle = this._document.defaultView.getComputedStyle(el, null);\n                const background = elStyle.backgroundImage.slice(4, -1).replace(/\"/g, '');\n                return {\n                  src: el.getAttribute('imageSrc') || background,\n                  thumb: el.getAttribute('thumbSrc') || background\n                };\n              }\n            }),\n            tap((data: any) => images.push(new ImageItem(data))),\n            finalize(() => galleryRef.load(images))\n          );\n        } else {\n          return EMPTY;\n        }\n      })\n    ).subscribe();\n\n    // Observe content changes\n    this._observer$ = new MutationObserver(() => this._detector$.next());\n    this._observer$.observe(this._el.nativeElement, { childList: true, subtree: true });\n  }\n}\n","import { Directive, ElementRef, OnInit, Input, OnDestroy, Renderer2 } from '@angular/core';\nimport { fromEvent, SubscriptionLike, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Lightbox } from './lightbox.service';\n\n@Directive({\n  selector: '[lightbox]'\n})\nexport class LightboxDirective implements OnInit, OnDestroy {\n\n  clickEvent: SubscriptionLike = Subscription.EMPTY;\n\n  @Input('lightbox') index = 0;\n  @Input('gallery') id = 'root';\n\n  constructor(private _lightbox: Lightbox, private _el: ElementRef, private _renderer: Renderer2) {\n  }\n\n  ngOnInit() {\n    this._renderer.setStyle(this._el.nativeElement, 'cursor', 'pointer');\n    this.clickEvent = fromEvent(this._el.nativeElement, 'click').pipe(\n      tap(() => this._lightbox.open(this.index, this.id))\n    ).subscribe();\n  }\n\n  ngOnDestroy() {\n    this.clickEvent.unsubscribe();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { GalleryModule } from 'ng-gallery';\n\nimport { Lightbox } from './lightbox.service';\nimport { LightboxComponent } from './lightbox.component';\nimport { LightboxDirective } from './lightbox.directive';\nimport { LightboxConfig, LIGHTBOX_CONFIG } from './lightbox.model';\nimport { GallerizeDirective } from './gallerize.directive';\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    GalleryModule,\n    A11yModule\n  ],\n  declarations: [\n    LightboxComponent,\n    LightboxDirective,\n    GallerizeDirective\n  ],\n  exports: [\n    LightboxDirective,\n    GallerizeDirective\n  ],\n  providers: [\n    Lightbox\n  ]\n})\nexport class LightboxModule {\n  static withConfig(config: LightboxConfig): ModuleWithProviders<LightboxModule> {\n    return {\n      ngModule: LightboxModule,\n      providers: [\n        {\n          provide: LIGHTBOX_CONFIG,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i2","i1","i2.Lightbox","i1.Lightbox"],"mappings":"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"}