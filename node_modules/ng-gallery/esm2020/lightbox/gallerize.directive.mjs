import { Directive, Input, Inject, Optional, Self, Host, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { ImageItem } from 'ng-gallery';
import { Subject, from, EMPTY } from 'rxjs';
import { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "ng-gallery";
import * as i2 from "./lightbox.service";
export class GallerizeDirective {
    constructor(_zone, _el, _gallery, _lightbox, platform, _document, _galleryCmp) {
        this._zone = _zone;
        this._el = _el;
        this._gallery = _gallery;
        this._lightbox = _lightbox;
        this._document = _document;
        this._galleryCmp = _galleryCmp;
        /** Default gallery id */
        this._galleryId = 'lightbox';
        /** The selector used to query images elements */
        this.selector = 'img';
        // Set gallerize mode
        if (isPlatformBrowser(platform)) {
            this._mode = _galleryCmp ? "gallery" /* GallerizeMode.Gallery */ : "detector" /* GallerizeMode.Detector */;
        }
    }
    ngOnInit() {
        this._zone.runOutsideAngular(() => {
            this._galleryId = this.gallerize || this._galleryId;
            const ref = this._gallery.ref(this._galleryId);
            switch (this._mode) {
                case "detector" /* GallerizeMode.Detector */:
                    this.detectorMode(ref);
                    break;
                case "gallery" /* GallerizeMode.Gallery */:
                    this.galleryMode(ref);
            }
        });
    }
    ngOnDestroy() {
        switch (this._mode) {
            case "detector" /* GallerizeMode.Detector */:
                this._detector$.complete();
                this._observer$.disconnect();
                break;
            case "gallery" /* GallerizeMode.Gallery */:
                this._itemClick$.unsubscribe();
                this._itemChange$.unsubscribe();
        }
    }
    /** Gallery mode: means `gallerize` directive is used on `<gallery>` component
     * Adds a click event to each gallery item so it opens in lightbox */
    galleryMode(galleryRef) {
        // Clone its items to the new gallery instance
        this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i) => this._lightbox.open(i, this._galleryId));
        this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state) => galleryRef.load(state.items));
    }
    /** Detector mode: means `gallerize` directive is used on a normal HTMLElement
     *  Detects images and adds a click event to each image, so it opens in the lightbox */
    detectorMode(galleryRef) {
        this._detector$ = new Subject();
        // Query image elements
        this._detector$.pipe(debounceTime(300), switchMap(() => {
            /** get all img elements from content */
            const imageElements = this._el.nativeElement.querySelectorAll(this.selector);
            if (imageElements && imageElements.length) {
                const images = [];
                return from(imageElements).pipe(map((el, i) => {
                    // Add click event to the image
                    el.style.cursor = 'pointer';
                    el.addEventListener('click', () => {
                        this._zone.run(() => this._lightbox.open(i, this._galleryId));
                    });
                    if (el instanceof HTMLImageElement) {
                        // If element is type of img use the src property
                        return {
                            src: el.getAttribute('imageSrc') || el.src,
                            thumb: el.getAttribute('thumbSrc') || el.src
                        };
                    }
                    else {
                        // Otherwise, use element background-image url
                        const elStyle = this._document.defaultView.getComputedStyle(el, null);
                        const background = elStyle.backgroundImage.slice(4, -1).replace(/"/g, '');
                        return {
                            src: el.getAttribute('imageSrc') || background,
                            thumb: el.getAttribute('thumbSrc') || background
                        };
                    }
                }), tap((data) => images.push(new ImageItem(data))), finalize(() => galleryRef.load(images)));
            }
            else {
                return EMPTY;
            }
        })).subscribe();
        // Observe content changes
        this._observer$ = new MutationObserver(() => this._detector$.next());
        this._observer$.observe(this._el.nativeElement, { childList: true, subtree: true });
    }
}
GallerizeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: GallerizeDirective, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.Gallery }, { token: i2.Lightbox }, { token: PLATFORM_ID }, { token: DOCUMENT }, { token: i1.GalleryComponent, host: true, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });
GallerizeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.0", type: GallerizeDirective, selector: "[gallerize]", inputs: { gallerize: "gallerize", selector: "selector" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: GallerizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[gallerize]'
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.Gallery }, { type: i2.Lightbox }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.GalleryComponent, decorators: [{
                    type: Host
                }, {
                    type: Self
                }, {
                    type: Optional
                }] }]; }, propDecorators: { gallerize: [{
                type: Input
            }], selector: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,