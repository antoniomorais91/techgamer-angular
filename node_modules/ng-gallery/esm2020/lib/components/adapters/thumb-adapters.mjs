import { ThumbnailsView } from '../../models/constants';
import { HorizontalCommonAdapter, VerticalCommonAdapter } from './common-adapter';
export class HorizontalThumbAdapter extends HorizontalCommonAdapter {
    constructor(slider, config) {
        super(slider, config);
        this.slider = slider;
        this.config = config;
    }
    get thumbSize() {
        return this.config.thumbWidth;
    }
    get isContentLessThanContainer() {
        return this.slider.clientWidth >= this.slider.firstElementChild.clientWidth;
    }
    getCentralisedScrollToValue(el, behavior, thumbView) {
        let position = el.offsetLeft;
        if (thumbView === ThumbnailsView.Default) {
            position -= (this.clientSize / 2) - (el.clientWidth / 2);
        }
        return {
            start: position,
            duration: behavior === 'smooth' ? this.config.slidingDuration : 0,
            easing: this.config.slidingEase
        };
    }
    getScrollToValue(el, behavior) {
        let position = el.offsetLeft - ((this.clientSize - el.clientWidth) / 2);
        return {
            start: position,
            duration: behavior === 'smooth' ? this.config.slidingDuration : 0,
            easing: this.config.slidingEase
        };
    }
    getCentralizerStartSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientWidth;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.firstElementChild?.clientWidth / 2);
    }
    getCentralizerEndSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientWidth;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.lastElementChild?.clientWidth / 2);
    }
}
export class VerticalThumbAdapter extends VerticalCommonAdapter {
    constructor(slider, config) {
        super(slider, config);
        this.slider = slider;
        this.config = config;
    }
    get thumbSize() {
        return this.config.thumbHeight;
    }
    get isContentLessThanContainer() {
        return this.slider.clientHeight >= this.slider.firstElementChild.clientHeight;
    }
    getCentralisedScrollToValue(el, behavior, thumbView) {
        let position = el.offsetTop;
        if (thumbView === ThumbnailsView.Default) {
            position -= (this.clientSize / 2) - (el.clientHeight / 2);
        }
        return {
            top: position,
            duration: behavior === 'smooth' ? this.config.slidingDuration : 0,
            easing: this.config.slidingEase
        };
    }
    getScrollToValue(el, behavior) {
        const position = el.offsetTop - ((this.clientSize - el.clientHeight) / 2);
        return {
            top: position,
            duration: behavior === 'smooth' ? this.config.slidingDuration : 0,
            easing: this.config.slidingEase
        };
    }
    getCentralizerStartSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientHeight;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.firstElementChild?.clientHeight / 2);
    }
    getCentralizerEndSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientHeight;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.lastElementChild?.clientHeight / 2);
    }
}
//# sourceMappingURL=data:application/json;base64,