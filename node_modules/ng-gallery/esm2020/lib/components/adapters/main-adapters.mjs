import { HorizontalCommonAdapter, VerticalCommonAdapter } from './common-adapter';
export class HorizontalAdapter extends HorizontalCommonAdapter {
    constructor(slider, config) {
        super(slider, config);
        this.slider = slider;
        this.config = config;
    }
    get measureIndex() {
        return this.slider.scrollLeft / this.slider.clientWidth;
    }
    get isContentLessThanContainer() {
        return this.slider.clientWidth >= this.slider.firstElementChild.clientWidth;
    }
    getClientSize(el) {
        return el.clientWidth;
    }
    getOffsetSize(el) {
        return el.offsetLeft;
    }
    getScrollToValue(el, behavior) {
        const position = el.offsetLeft - ((this.clientSize - el.clientWidth) / 2);
        return {
            start: position,
            duration: behavior === 'smooth' ? this.config.slidingDuration : 0,
            easing: this.config.slidingEase
        };
    }
    getPanDelta(e) {
        return e.deltaX;
    }
    getPanVelocity(e) {
        return e.velocityX;
    }
    getCentralizerStartSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientWidth;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.firstElementChild?.clientWidth / 2);
    }
    getCentralizerEndSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientWidth;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.lastElementChild?.clientWidth / 2);
    }
}
export class VerticalAdapter extends VerticalCommonAdapter {
    constructor(slider, config) {
        super(slider, config);
        this.slider = slider;
        this.config = config;
    }
    get measureIndex() {
        return this.slider.scrollTop / this.slider.clientHeight;
    }
    get isContentLessThanContainer() {
        return this.slider.clientHeight >= this.slider.firstElementChild.clientHeight;
    }
    getClientSize(el) {
        return el.clientHeight;
    }
    getOffsetSize(el) {
        return el.offsetTop;
    }
    getScrollToValue(el, behavior) {
        const position = el.offsetTop - ((this.clientSize - el.clientHeight) / 2);
        return {
            top: position,
            duration: behavior === 'smooth' ? this.config.slidingDuration : 0,
            easing: this.config.slidingEase
        };
    }
    getPanDelta(e) {
        return e.deltaY;
    }
    getPanVelocity(e) {
        return e.velocityY;
    }
    getCentralizerStartSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientHeight;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.firstElementChild?.clientHeight / 2);
    }
    getCentralizerEndSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientHeight;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.lastElementChild?.clientHeight / 2);
    }
}
//# sourceMappingURL=data:application/json;base64,